{"map":"{\"version\":3,\"sources\":[\"/Users/arjunyadav/Documents/GitHub/Meme-generator/src/Header.js\",\"/Users/arjunyadav/Documents/GitHub/Meme-generator/src/MemeGenerator.js\",\"/Users/arjunyadav/Documents/GitHub/Meme-generator/src/App.js\",\"/Users/arjunyadav/Documents/GitHub/Meme-generator/src/serviceWorker.js\",\"/Users/arjunyadav/Documents/GitHub/Meme-generator/src/index.js\"],\"names\":[\"Header\",\"react_default\",\"a\",\"createElement\",\"MemeGenerator\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"topText\",\"bottomText\",\"randomImg\",\"allMemeImgs\",\"handleChange\",\"bind\",\"assertThisInitialized\",\"handleSubmit\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"memes\",\"data\",\"setState\",\"event\",\"_event$target\",\"target\",\"name\",\"value\",\"defineProperty\",\"preventDefault\",\"randNum\",\"Math\",\"floor\",\"random\",\"length\",\"randMemeImg\",\"url\",\"className\",\"onSubmit\",\"type\",\"placeholder\",\"onChange\",\"src\",\"alt\",\"Component\",\"App\",\"src_Header\",\"src_MemeGenerator\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"8NAUeA,IAAAA,EARf,WACI,OACIC,EAAAC,EAAAC,cAAA,SAAA,KACIF,EAAAC,EAAAC,cAAA,IAAA,KAAA,qEC8DGC,cAhEX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjBX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAA,OAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,aAAef,EAAKe,aAAaF,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAA,OAAAa,EAAA,EAAAb,CAAAD,KATVA,mFAYM,IAAAgB,EAAAb,KAChBc,MAAM,qCACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAY,IACPE,EAASF,EAASG,KAAlBD,MACPL,EAAKO,SAAS,CAAEZ,YAAaU,2CAI5BG,GAAO,IAAAC,EACMD,EAAME,OAArBC,EADSF,EACTE,KAAMC,EADGH,EACHG,MACbzB,KAAKoB,SAALtB,OAAA4B,EAAA,EAAA5B,CAAA,GAAiB0B,EAAOC,yCAGfJ,GACTA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW/B,KAAKI,MAAMI,YAAYwB,QAC5DC,EAAcjC,KAAKI,MAAMI,YAAYoB,GAASM,IACpDlC,KAAKoB,SAAS,CAAEb,UAAW0B,qCAI3B,OACIxC,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,OAAA,CAAMwC,UAAU,YAAYC,SAAUpC,KAAKY,cACvCnB,EAAAC,EAAAC,cAAA,QAAA,CACI0C,KAAK,OACLb,KAAK,UACLc,YAAY,WACZb,MAAOzB,KAAKI,MAAMC,QAClBkC,SAAUvC,KAAKS,eAEnBhB,EAAAC,EAAAC,cAAA,QAAA,CACI0C,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAOzB,KAAKI,MAAME,WAClBiC,SAAUvC,KAAKS,eAGnBhB,EAAAC,EAAAC,cAAA,SAAA,KAAA,QAEJF,EAAAC,EAAAC,cAAA,MAAA,CAAKwC,UAAU,QACX1C,EAAAC,EAAAC,cAAA,MAAA,CAAK6C,IAAKxC,KAAKI,MAAMG,UAAWkC,IAAI,KACpChD,EAAAC,EAAAC,cAAA,KAAA,CAAIwC,UAAU,OAAOnC,KAAKI,MAAMC,SAChCZ,EAAAC,EAAAC,cAAA,KAAA,CAAIwC,UAAU,UAAUnC,KAAKI,MAAME,qBA1D3BoC,EAAAA,WCYbC,IAAAA,EATf,WACI,OACIlD,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\"\\n\\nfunction Header() {\\n    return (\\n        <header>\\n            <p>Meme Generator</p>\\n        </header>\\n    )\\n}\\n\\nexport default Header\\n\",\"import React, {Component} from \\\"react\\\"\\n\\nclass MemeGenerator extends Component {\\n    constructor() {\\n        super()\\n        this.state = {\\n            topText: \\\"\\\",\\n            bottomText: \\\"\\\",\\n            randomImg: \\\"http://i.imgflip.com/1bij.jpg\\\",\\n            allMemeImgs: []\\n        }\\n        this.handleChange = this.handleChange.bind(this)\\n        this.handleSubmit = this.handleSubmit.bind(this)\\n    }\\n\\n    componentDidMount() {\\n        fetch(\\\"https://api.imgflip.com/get_memes\\\")\\n            .then(response => response.json())\\n            .then(response => {\\n                const {memes} = response.data\\n                this.setState({ allMemeImgs: memes })\\n            })\\n    }\\n\\n    handleChange(event) {\\n        const {name, value} = event.target\\n        this.setState({ [name]: value })\\n    }\\n\\n    handleSubmit(event) {\\n        event.preventDefault()\\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\\n        const randMemeImg = this.state.allMemeImgs[randNum].url\\n        this.setState({ randomImg: randMemeImg })\\n    }\\n\\n    render() {\\n        return (\\n            <div>\\n                <form className=\\\"meme-form\\\" onSubmit={this.handleSubmit}>\\n                    <input\\n                        type=\\\"text\\\"\\n                        name=\\\"topText\\\"\\n                        placeholder=\\\"Top Text\\\"\\n                        value={this.state.topText}\\n                        onChange={this.handleChange}\\n                    />\\n                    <input\\n                        type=\\\"text\\\"\\n                        name=\\\"bottomText\\\"\\n                        placeholder=\\\"Bottom Text\\\"\\n                        value={this.state.bottomText}\\n                        onChange={this.handleChange}\\n                    />\\n\\n                    <button>Gen</button>\\n                </form>\\n                <div className=\\\"meme\\\">\\n                    <img src={this.state.randomImg} alt=\\\"\\\" />\\n                    <h2 className=\\\"top\\\">{this.state.topText}</h2>\\n                    <h2 className=\\\"bottom\\\">{this.state.bottomText}</h2>\\n                </div>\\n            </div>\\n        )\\n    }\\n}\\n\\nexport default MemeGenerator\\n\",\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Header from \\\"./Header\\\"\\nimport MemeGenerator from \\\"./MemeGenerator\\\"\\n\\nfunction App() {\\n    return (\\n        <div>\\n            <Header />\\n            <MemeGenerator />\\n        </div>\\n    )\\n}\\n\\nexport default App\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,t,a){e.exports=a(20)},16:function(e,t,a){},18:function(e,t,a){},20:function(e,t,a){\"use strict\";a.r(t);var n=a(0),o=a.n(n),l=a(3),m=a.n(l);a(16),a(18);var r=function(){return o.a.createElement(\"header\",null,o.a.createElement(\"p\",null,\"Meme Generator\"))},i=a(4),c=a(5),s=a(6),h=a(8),u=a(7),d=a(9),p=a(1),b=function(e){function t(){var e;return Object(c.a)(this,t),(e=Object(h.a)(this,Object(u.a)(t).call(this))).state={topText:\"\",bottomText:\"\",randomImg:\"http://i.imgflip.com/1bij.jpg\",allMemeImgs:[]},e.handleChange=e.handleChange.bind(Object(p.a)(Object(p.a)(e))),e.handleSubmit=e.handleSubmit.bind(Object(p.a)(Object(p.a)(e))),e}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://api.imgflip.com/get_memes\").then(function(e){return e.json()}).then(function(t){var a=t.data.memes;e.setState({allMemeImgs:a})})}},{key:\"handleChange\",value:function(e){var t=e.target,a=t.name,n=t.value;this.setState(Object(i.a)({},a,n))}},{key:\"handleSubmit\",value:function(e){e.preventDefault();var t=Math.floor(Math.random()*this.state.allMemeImgs.length),a=this.state.allMemeImgs[t].url;this.setState({randomImg:a})}},{key:\"render\",value:function(){return o.a.createElement(\"div\",null,o.a.createElement(\"form\",{className:\"meme-form\",onSubmit:this.handleSubmit},o.a.createElement(\"input\",{type:\"text\",name:\"topText\",placeholder:\"Top Text\",value:this.state.topText,onChange:this.handleChange}),o.a.createElement(\"input\",{type:\"text\",name:\"bottomText\",placeholder:\"Bottom Text\",value:this.state.bottomText,onChange:this.handleChange}),o.a.createElement(\"button\",null,\"Gen\")),o.a.createElement(\"div\",{className:\"meme\"},o.a.createElement(\"img\",{src:this.state.randomImg,alt:\"\"}),o.a.createElement(\"h2\",{className:\"top\"},this.state.topText),o.a.createElement(\"h2\",{className:\"bottom\"},this.state.bottomText)))}}]),t}(n.Component);var g=function(){return o.a.createElement(\"div\",null,o.a.createElement(r,null),o.a.createElement(b,null))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));m.a.render(o.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,2,1]]]);","extractedComments":[]}